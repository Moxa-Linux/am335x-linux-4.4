#!/usr/bin/make -f

include /usr/share/dpkg/architecture.mk

export DEB_BUILD_MAINT_OPTIONS = hardening=+all
#export DEB_CFLAGS_MAINT_APPEND  = -Wall -pedantic
#export DEB_LDFLAGS_MAINT_APPEND = -Wl,--as-needed

KERNEL_CONFIG := am335x_defconfig
KERNEL_NAME := 4.4.0-cip
MOXA_ITBS := am335x-moxa-uc-2100 \
	am335x-moxa-uc-3100 \
	am335x-moxa-uc-5100 \
	am335x-moxa-uc-8100a-me

OUTPUT_DIR := output
MODULES_OUTDIR := $(OUTPUT_DIR)/modules
ITBS_OUTDIR := $(OUTPUT_DIR)/itbs
SCRIPTS_OUTDIR := $(OUTPUT_DIR)/scripts
HEADERS_OUTDIR := $(OUTPUT_DIR)/headers/linux-headers-$(KERNEL_NAME)

override_dh_auto_clean:
	$(MAKE) -j $(shell nproc) clean
	@rm -rf $(OUTPUT_DIR)

override_dh_auto_build:
# Create output directory
	@mkdir -p $(OUTPUT_DIR)
	@mkdir -p $(MODULES_OUTDIR)
	@mkdir -p $(ITBS_OUTDIR)
	@mkdir -p $(SCRIPTS_OUTDIR)
	@mkdir -p $(HEADERS_OUTDIR)

# Configure kernel
	if [ ! -f ".config" ]; then \
		$(MAKE) $(KERNEL_CONFIG); \
	fi
# Prepare kernel information & tools needed
	$(MAKE) prepare
	$(MAKE) M=scripts

ifeq ($(DEB_HOST_ARCH), armhf)
# Compile kernel
	$(MAKE) -j $(shell nproc)
# Build uImage, device-trees, ITBs
	$(MAKE) uImage
	$(MAKE) dtbs
	@for number in $(MOXA_ITBS); do \
		mkimage -f its/$$number.its $(ITBS_OUTDIR)/$$number.itb; \
	done
# Strip & install kernel modules
	$(MAKE) modules_install \
		INSTALL_MOD_STRIP=1 \
		INSTALL_MOD_PATH=$(MODULES_OUTDIR)
	@find $(MODULES_OUTDIR) -type l -exec rm -f {} +
# Copy files needed to kernel header package directory
	( \
		echo ".config"; \
		echo "Makefile"; \
		echo "Module.symvers"; \
		echo "arch/arm/Makefile"; \
		echo "arch/arm/kernel/module.lds"; \
		echo "include/config/auto.conf"; \
		echo "include/config/kernel.release"; \
		find arch/arm/ include/ -name "*.h" -o -name "Kbuild" -o -name "*.S"; \
	) | cpio -pd --preserve-modification-time $(HEADERS_OUTDIR)
endif

# Create kbuild tools
	$(MAKE) -f debian/Makefile.scripts \
		OUTDIR=$(SCRIPTS_OUTDIR)

override_dh_auto_install:
	$(info Skip dh_auto_install)

override_dh_strip:
	dh_strip --no-automatic-dbgsym

#
# Call debhelper for clean, build, binary
#
%:
	dh $@
